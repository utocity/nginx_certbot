worker_processes 2;

# error_log /usr/local/var/log/nginx/error.log notice;
# pid       /usr/local/var/run/nginx/nginx.pid;

# worker_rlimit_nofile 1024;

events {
       use epoll;
       worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                   '$status $body_bytes_sent "$http_referer" '
    #                   '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile on;
    # tcp_nopush on;
    # tcp_nodelay on;
    #keepalive_timeout 0;
    #gzip on;
    #gzip_min_length 1k;
    #gzip_buffers 4 16k;
    #gzip_http_version 1.1;
    #gzip_comp_level 2;
    #gzip_types text/plain application/x-javascript text/css application/xml;
    #gzip_vary on;

    server {
        listen 80 default_server;
	server_name utocity.com www.utocity.com;

	root /var/www/letsencrypt;

	location /.well-known {
	    try_files $uri $uri/ =404;
	}

	location / {
	    return 301 https://www.utocity.com$request_uri;
	}
    }

    server {
        listen 80;
	server_name api.utocity.com;

	root /var/www/letsencrypt;

	location /.well-known {
	    try_files $uri $uri/ =404;
	}

	location / {
	    return 301 https://api.utocity.com$request_uri;
	}
    }

    server {
        listen 443 ssl http2; # ssl on
	server_name utocity.com;

	ssl_certificate /etc/letsencrypt/live/utocity.com/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/utocity.com/privkey.pem;

	return 301 https://www.utocity.com$request_uri;
    }

    server {
        listen 443 ssl http2; # ssl on
	server_name api.utocity.com www.utocity.com;

	ssl_certificate /etc/letsencrypt/live/utocity.com/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/utocity.com/privkey.pem;

	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;

	# Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
	ssl_dhparam /etc/nginx/ssl/dhparam.pem;

	# intermediate configuration. tweak to your needs.
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
	ssl_prefer_server_ciphers on;

	# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
	add_header Strict-Transport-Security max-age=15768000;

	# OCSP Stapling ---
	# fetch OCSP records from URL in ssl_certificate and cache them
	ssl_stapling on;
	ssl_stapling_verify on;

	## verify chain of trust of OCSP response using Root CA and Intermediate certs
	# ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;
	resolver 216.69.185.27 208.109.255.27;

	root /var/www/letsencrypt;

	location / {
	    try_files $uri $uri/ =404;
	}
    }
}
